name: Create and publish a Docker image

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - "apps/**"
      - "base/**"
      - "dev/**"
      - ".github/workflows/containers.build.yaml"
  pull_request:
    paths:
      - "apps/**"
      - "base/**"
      - "dev/**"
      - ".github/workflows/containers.build.yaml"

env:
  REGISTRY: ghcr.io

jobs:
  changes:
    name: Get changes
    runs-on: ubuntu-22.04
    outputs:
      matrix: '{"container": ${{ steps.reduce.outputs.containers }} }'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          list-files: json
          filters: |
            changed:
            - 'apps/**'
            - 'base/**'
            - 'dev/**'
      - run: echo '${{ toJson(steps.filter.outputs) }}' > changes.json
      - id: reduce
        run: |
          CONTAINERS=$(jq --raw-output '.changed_files | fromjson | .[] |= sub("(?<filepath>(?<first_directory>(?<root1>[/]?)[^/]+/)(?<second_directory>(?<root2>[/]?)[^/]+)(?<extra_paths>.+))"; "\(.second_directory)") | unique' changes.json)
          echo ::set-output name=containers::${CONTAINERS}

  hadolint:
    name: Run hadolint
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: hadolint
        uses: reviewdog/action-hadolint@v1.33.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          filter_mode: diff_context
          hadolint_ignore: DL3007
          fail_on_error: true

  build:
    name: Build
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    needs:
      - changes
      - hadolint

    strategy:
      matrix: ${{ fromJson(needs.changes.outputs.matrix) }}
      fail-fast: false

    if: "!contains(github.event.head_commit.message, '[ci-skip]')"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Define if tests and push should be run against which versions/platforms
      - name: Prepare
        id: prep
        run: |
          if test -f "./base/${{ matrix.container }}/Dockerfile"; then
            CATEGORY="base"
          elif test -f "./apps/${{ matrix.container }}/Dockerfile"; then
            CATEGORY="apps"
          else 
            CATEGORY="dev"
          fi
          echo ::set-output name=category::${CATEGORY}

          VERSION=$(jq .version --raw-output "./${CATEGORY}/${{ matrix.container }}/build.config.json")
          PLATFORMS=$(jq '.platforms | join(",")' --raw-output "./${CATEGORY}/${{ matrix.container }}/build.config.json")
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=platforms::${PLATFORMS}


          if [ "${{github.event_name}}" == "pull_request" ]; then
            echo ::set-output name=push::false
            echo ::set-output name=cache_from::"type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:buildcache" || echo ::set-output name=cache_from::""
            echo ::set-output name=cache_to::""
          else
            echo ::set-output name=push::true
            echo ::set-output name=cache_from::"type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:buildcache"
            echo ::set-output name=cache_to::"type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:buildcache,mode=max"
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
          version: latest
          driver-opts: image=moby/buildkit:master

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Creates a local build to run tests on
      - name: Build and Load local test-container
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          build-args: VERSION=${{ steps.prep.outputs.version }}
          context: ./${{ steps.prep.outputs.category }}/${{ matrix.container }}
          load: true
          push: false
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:test
          cache-from: ${{ steps.prep.outputs.cache_from }}
          cache-to: ${{ steps.prep.outputs.cache_to }}

      - name: Scan image
        uses: Azure/container-scan@v0
        with:
          image-name: ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:test

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          build-args: VERSION=${{ steps.prep.outputs.version }}
          context: ./${{ steps.prep.outputs.category }}/${{ matrix.container }}
          platforms: ${{ steps.prep.outputs.platforms }}
          push: ${{ steps.prep.outputs.push }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:latest
            ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:${{ steps.prep.outputs.version }}
          cache-from: ${{ steps.prep.outputs.cache_from }}
          cache-to: ${{ steps.prep.outputs.cache_to }}

  container-build-complete:
    needs: [build]
    name: Container Build Completed
    runs-on: ubuntu-22.04
    steps:
      - name: complete message
        run: echo "Container Build and Tests Completed Successfully"

  automerge:
    needs: [container-build-complete]
    name: Automerge build
    runs-on: ubuntu-22.04
    if: github.event_name == 'pull_request'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: automerge
        uses: pascalgn/automerge-action@v0.15.3
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          UPDATE_RETRIES: 12
          UPDATE_RETRY_SLEEP: 60000
